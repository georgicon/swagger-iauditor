<?php
/**
 * NewEmailFirstnameLastnameStatusModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SafetyCulture API
 *
 * The SafetyCulture API gives you direct access to your data in the SafetyCulture platform.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * NewEmailFirstnameLastnameStatusModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NewEmailFirstnameLastnameStatusModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'New_emailFirstnameLastnameStatusModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'new_email' => 'string',
        'firstname' => 'string',
        'lastname' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'new_email' => null,
        'firstname' => null,
        'lastname' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'new_email' => 'new_email',
        'firstname' => 'firstname',
        'lastname' => 'lastname',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'new_email' => 'setNewEmail',
        'firstname' => 'setFirstname',
        'lastname' => 'setLastname',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'new_email' => 'getNewEmail',
        'firstname' => 'getFirstname',
        'lastname' => 'getLastname',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_ACTIVE = 'active';
    const STATUS_INACTIVE = 'inactive';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_INACTIVE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['new_email'] = isset($data['new_email']) ? $data['new_email'] : null;
        $this->container['firstname'] = isset($data['firstname']) ? $data['firstname'] : null;
        $this->container['lastname'] = isset($data['lastname']) ? $data['lastname'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['new_email']) && (mb_strlen($this->container['new_email']) > 200)) {
            $invalidProperties[] = "invalid value for 'new_email', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['new_email']) && (mb_strlen($this->container['new_email']) < 3)) {
            $invalidProperties[] = "invalid value for 'new_email', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['firstname']) && (mb_strlen($this->container['firstname']) > 150)) {
            $invalidProperties[] = "invalid value for 'firstname', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['firstname']) && (mb_strlen($this->container['firstname']) < 1)) {
            $invalidProperties[] = "invalid value for 'firstname', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['lastname']) && (mb_strlen($this->container['lastname']) > 150)) {
            $invalidProperties[] = "invalid value for 'lastname', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['lastname']) && (mb_strlen($this->container['lastname']) < 1)) {
            $invalidProperties[] = "invalid value for 'lastname', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets new_email
     *
     * @return string
     */
    public function getNewEmail()
    {
        return $this->container['new_email'];
    }

    /**
     * Sets new_email
     *
     * @param string $new_email new_email
     *
     * @return $this
     */
    public function setNewEmail($new_email)
    {
        if (!is_null($new_email) && (mb_strlen($new_email) > 200)) {
            throw new \InvalidArgumentException('invalid length for $new_email when calling NewEmailFirstnameLastnameStatusModel., must be smaller than or equal to 200.');
        }
        if (!is_null($new_email) && (mb_strlen($new_email) < 3)) {
            throw new \InvalidArgumentException('invalid length for $new_email when calling NewEmailFirstnameLastnameStatusModel., must be bigger than or equal to 3.');
        }

        $this->container['new_email'] = $new_email;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return string
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param string $firstname firstname
     *
     * @return $this
     */
    public function setFirstname($firstname)
    {
        if (!is_null($firstname) && (mb_strlen($firstname) > 150)) {
            throw new \InvalidArgumentException('invalid length for $firstname when calling NewEmailFirstnameLastnameStatusModel., must be smaller than or equal to 150.');
        }
        if (!is_null($firstname) && (mb_strlen($firstname) < 1)) {
            throw new \InvalidArgumentException('invalid length for $firstname when calling NewEmailFirstnameLastnameStatusModel., must be bigger than or equal to 1.');
        }

        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets lastname
     *
     * @return string
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     *
     * @param string $lastname lastname
     *
     * @return $this
     */
    public function setLastname($lastname)
    {
        if (!is_null($lastname) && (mb_strlen($lastname) > 150)) {
            throw new \InvalidArgumentException('invalid length for $lastname when calling NewEmailFirstnameLastnameStatusModel., must be smaller than or equal to 150.');
        }
        if (!is_null($lastname) && (mb_strlen($lastname) < 1)) {
            throw new \InvalidArgumentException('invalid length for $lastname when calling NewEmailFirstnameLastnameStatusModel., must be bigger than or equal to 1.');
        }

        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


