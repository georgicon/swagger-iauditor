<?php
/**
 * AuditIdItemIdCreatedByStatusPriorityAssigneesDueAtCreatedAtModifiedAtMatchTextOffsetLimitModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SafetyCulture API
 *
 * The SafetyCulture API gives you direct access to your data in the SafetyCulture platform.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AuditIdItemIdCreatedByStatusPriorityAssigneesDueAtCreatedAtModifiedAtMatchTextOffsetLimitModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuditIdItemIdCreatedByStatusPriorityAssigneesDueAtCreatedAtModifiedAtMatchTextOffsetLimitModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Audit_idItem_idCreated_byStatusPriorityAssigneesDue_atCreated_atModified_atMatch_textOffsetLimitModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'audit_id' => 'string[]',
        'item_id' => 'string[]',
        'created_by' => 'string[]',
        'status' => 'float[]',
        'priority' => 'float[]',
        'assignees' => '\Swagger\Client\Model\TypeIdModel[]',
        'due_at' => '\Swagger\Client\Model\FromToModel',
        'created_at' => '\Swagger\Client\Model\FromToModel',
        'modified_at' => '\Swagger\Client\Model\FromToModel',
        'match_text' => 'string',
        'offset' => 'float',
        'limit' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'audit_id' => null,
        'item_id' => null,
        'created_by' => null,
        'status' => null,
        'priority' => null,
        'assignees' => null,
        'due_at' => null,
        'created_at' => null,
        'modified_at' => null,
        'match_text' => null,
        'offset' => null,
        'limit' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'audit_id' => 'audit_id',
        'item_id' => 'item_id',
        'created_by' => 'created_by',
        'status' => 'status',
        'priority' => 'priority',
        'assignees' => 'assignees',
        'due_at' => 'due_at',
        'created_at' => 'created_at',
        'modified_at' => 'modified_at',
        'match_text' => 'match_text',
        'offset' => 'offset',
        'limit' => 'limit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'audit_id' => 'setAuditId',
        'item_id' => 'setItemId',
        'created_by' => 'setCreatedBy',
        'status' => 'setStatus',
        'priority' => 'setPriority',
        'assignees' => 'setAssignees',
        'due_at' => 'setDueAt',
        'created_at' => 'setCreatedAt',
        'modified_at' => 'setModifiedAt',
        'match_text' => 'setMatchText',
        'offset' => 'setOffset',
        'limit' => 'setLimit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'audit_id' => 'getAuditId',
        'item_id' => 'getItemId',
        'created_by' => 'getCreatedBy',
        'status' => 'getStatus',
        'priority' => 'getPriority',
        'assignees' => 'getAssignees',
        'due_at' => 'getDueAt',
        'created_at' => 'getCreatedAt',
        'modified_at' => 'getModifiedAt',
        'match_text' => 'getMatchText',
        'offset' => 'getOffset',
        'limit' => 'getLimit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['audit_id'] = isset($data['audit_id']) ? $data['audit_id'] : null;
        $this->container['item_id'] = isset($data['item_id']) ? $data['item_id'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['assignees'] = isset($data['assignees']) ? $data['assignees'] : null;
        $this->container['due_at'] = isset($data['due_at']) ? $data['due_at'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['modified_at'] = isset($data['modified_at']) ? $data['modified_at'] : null;
        $this->container['match_text'] = isset($data['match_text']) ? $data['match_text'] : null;
        $this->container['offset'] = isset($data['offset']) ? $data['offset'] : null;
        $this->container['limit'] = isset($data['limit']) ? $data['limit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['offset']) && ($this->container['offset'] < 0)) {
            $invalidProperties[] = "invalid value for 'offset', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['limit']) && ($this->container['limit'] > 100)) {
            $invalidProperties[] = "invalid value for 'limit', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['limit']) && ($this->container['limit'] < 1)) {
            $invalidProperties[] = "invalid value for 'limit', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets audit_id
     *
     * @return string[]
     */
    public function getAuditId()
    {
        return $this->container['audit_id'];
    }

    /**
     * Sets audit_id
     *
     * @param string[] $audit_id audit_id
     *
     * @return $this
     */
    public function setAuditId($audit_id)
    {
        $this->container['audit_id'] = $audit_id;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return string[]
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param string[] $item_id item_id
     *
     * @return $this
     */
    public function setItemId($item_id)
    {
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string[]
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string[] $created_by created_by
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets status
     *
     * @return float[]
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param float[] $status An array of Action statuses e.g. [0, 10]
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return float[]
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param float[] $priority An array of Action priorities e.g. [ 0, 10, 20 ]
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets assignees
     *
     * @return \Swagger\Client\Model\TypeIdModel[]
     */
    public function getAssignees()
    {
        return $this->container['assignees'];
    }

    /**
     * Sets assignees
     *
     * @param \Swagger\Client\Model\TypeIdModel[] $assignees The users an Action is assigned to
     *
     * @return $this
     */
    public function setAssignees($assignees)
    {
        $this->container['assignees'] = $assignees;

        return $this;
    }

    /**
     * Gets due_at
     *
     * @return \Swagger\Client\Model\FromToModel
     */
    public function getDueAt()
    {
        return $this->container['due_at'];
    }

    /**
     * Sets due_at
     *
     * @param \Swagger\Client\Model\FromToModel $due_at due_at
     *
     * @return $this
     */
    public function setDueAt($due_at)
    {
        $this->container['due_at'] = $due_at;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \Swagger\Client\Model\FromToModel
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \Swagger\Client\Model\FromToModel $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets modified_at
     *
     * @return \Swagger\Client\Model\FromToModel
     */
    public function getModifiedAt()
    {
        return $this->container['modified_at'];
    }

    /**
     * Sets modified_at
     *
     * @param \Swagger\Client\Model\FromToModel $modified_at modified_at
     *
     * @return $this
     */
    public function setModifiedAt($modified_at)
    {
        $this->container['modified_at'] = $modified_at;

        return $this;
    }

    /**
     * Gets match_text
     *
     * @return string
     */
    public function getMatchText()
    {
        return $this->container['match_text'];
    }

    /**
     * Sets match_text
     *
     * @param string $match_text match_text
     *
     * @return $this
     */
    public function setMatchText($match_text)
    {
        $this->container['match_text'] = $match_text;

        return $this;
    }

    /**
     * Gets offset
     *
     * @return float
     */
    public function getOffset()
    {
        return $this->container['offset'];
    }

    /**
     * Sets offset
     *
     * @param float $offset offset
     *
     * @return $this
     */
    public function setOffset($offset)
    {

        if (!is_null($offset) && ($offset < 0)) {
            throw new \InvalidArgumentException('invalid value for $offset when calling AuditIdItemIdCreatedByStatusPriorityAssigneesDueAtCreatedAtModifiedAtMatchTextOffsetLimitModel., must be bigger than or equal to 0.');
        }

        $this->container['offset'] = $offset;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return float
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param float $limit limit
     *
     * @return $this
     */
    public function setLimit($limit)
    {

        if (!is_null($limit) && ($limit > 100)) {
            throw new \InvalidArgumentException('invalid value for $limit when calling AuditIdItemIdCreatedByStatusPriorityAssigneesDueAtCreatedAtModifiedAtMatchTextOffsetLimitModel., must be smaller than or equal to 100.');
        }
        if (!is_null($limit) && ($limit < 1)) {
            throw new \InvalidArgumentException('invalid value for $limit when calling AuditIdItemIdCreatedByStatusPriorityAssigneesDueAtCreatedAtModifiedAtMatchTextOffsetLimitModel., must be bigger than or equal to 1.');
        }

        $this->container['limit'] = $limit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


