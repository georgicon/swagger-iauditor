<?php
/**
 * ActionsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SafetyCulture API
 *
 * The SafetyCulture API gives you direct access to your data in the SafetyCulture platform.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ActionsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ActionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation actionsActionIdDelete
     *
     * Delete an Action
     *
     * @param  string $action_id The action identifier (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function actionsActionIdDelete($action_id)
    {
        $this->actionsActionIdDeleteWithHttpInfo($action_id);
    }

    /**
     * Operation actionsActionIdDeleteWithHttpInfo
     *
     * Delete an Action
     *
     * @param  string $action_id The action identifier (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function actionsActionIdDeleteWithHttpInfo($action_id)
    {
        $returnType = '';
        $request = $this->actionsActionIdDeleteRequest($action_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation actionsActionIdDeleteAsync
     *
     * Delete an Action
     *
     * @param  string $action_id The action identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function actionsActionIdDeleteAsync($action_id)
    {
        return $this->actionsActionIdDeleteAsyncWithHttpInfo($action_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation actionsActionIdDeleteAsyncWithHttpInfo
     *
     * Delete an Action
     *
     * @param  string $action_id The action identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function actionsActionIdDeleteAsyncWithHttpInfo($action_id)
    {
        $returnType = '';
        $request = $this->actionsActionIdDeleteRequest($action_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'actionsActionIdDelete'
     *
     * @param  string $action_id The action identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function actionsActionIdDeleteRequest($action_id)
    {
        // verify the required parameter 'action_id' is set
        if ($action_id === null || (is_array($action_id) && count($action_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $action_id when calling actionsActionIdDelete'
            );
        }

        $resourcePath = '/actions/{actionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($action_id !== null) {
            $resourcePath = str_replace(
                '{' . 'actionId' . '}',
                ObjectSerializer::toPathValue($action_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation actionsActionIdGet
     *
     * Retrieve the details of an existing Action
     *
     * @param  string $action_id The action identifier (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function actionsActionIdGet($action_id)
    {
        $this->actionsActionIdGetWithHttpInfo($action_id);
    }

    /**
     * Operation actionsActionIdGetWithHttpInfo
     *
     * Retrieve the details of an existing Action
     *
     * @param  string $action_id The action identifier (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function actionsActionIdGetWithHttpInfo($action_id)
    {
        $returnType = '';
        $request = $this->actionsActionIdGetRequest($action_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation actionsActionIdGetAsync
     *
     * Retrieve the details of an existing Action
     *
     * @param  string $action_id The action identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function actionsActionIdGetAsync($action_id)
    {
        return $this->actionsActionIdGetAsyncWithHttpInfo($action_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation actionsActionIdGetAsyncWithHttpInfo
     *
     * Retrieve the details of an existing Action
     *
     * @param  string $action_id The action identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function actionsActionIdGetAsyncWithHttpInfo($action_id)
    {
        $returnType = '';
        $request = $this->actionsActionIdGetRequest($action_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'actionsActionIdGet'
     *
     * @param  string $action_id The action identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function actionsActionIdGetRequest($action_id)
    {
        // verify the required parameter 'action_id' is set
        if ($action_id === null || (is_array($action_id) && count($action_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $action_id when calling actionsActionIdGet'
            );
        }

        $resourcePath = '/actions/{actionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($action_id !== null) {
            $resourcePath = str_replace(
                '{' . 'actionId' . '}',
                ObjectSerializer::toPathValue($action_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation actionsActionIdPut
     *
     * Update an existing Action
     *
     * @param  string $action_id The action identifier (required)
     * @param  \Swagger\Client\Model\DescriptionStatusPriorityAssigneesDueAtCompletedAtModel $description_status_priority_assignees_due_at_completed_at_model description_status_priority_assignees_due_at_completed_at_model (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function actionsActionIdPut($action_id, $description_status_priority_assignees_due_at_completed_at_model = null)
    {
        $this->actionsActionIdPutWithHttpInfo($action_id, $description_status_priority_assignees_due_at_completed_at_model);
    }

    /**
     * Operation actionsActionIdPutWithHttpInfo
     *
     * Update an existing Action
     *
     * @param  string $action_id The action identifier (required)
     * @param  \Swagger\Client\Model\DescriptionStatusPriorityAssigneesDueAtCompletedAtModel $description_status_priority_assignees_due_at_completed_at_model (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function actionsActionIdPutWithHttpInfo($action_id, $description_status_priority_assignees_due_at_completed_at_model = null)
    {
        $returnType = '';
        $request = $this->actionsActionIdPutRequest($action_id, $description_status_priority_assignees_due_at_completed_at_model);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation actionsActionIdPutAsync
     *
     * Update an existing Action
     *
     * @param  string $action_id The action identifier (required)
     * @param  \Swagger\Client\Model\DescriptionStatusPriorityAssigneesDueAtCompletedAtModel $description_status_priority_assignees_due_at_completed_at_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function actionsActionIdPutAsync($action_id, $description_status_priority_assignees_due_at_completed_at_model = null)
    {
        return $this->actionsActionIdPutAsyncWithHttpInfo($action_id, $description_status_priority_assignees_due_at_completed_at_model)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation actionsActionIdPutAsyncWithHttpInfo
     *
     * Update an existing Action
     *
     * @param  string $action_id The action identifier (required)
     * @param  \Swagger\Client\Model\DescriptionStatusPriorityAssigneesDueAtCompletedAtModel $description_status_priority_assignees_due_at_completed_at_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function actionsActionIdPutAsyncWithHttpInfo($action_id, $description_status_priority_assignees_due_at_completed_at_model = null)
    {
        $returnType = '';
        $request = $this->actionsActionIdPutRequest($action_id, $description_status_priority_assignees_due_at_completed_at_model);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'actionsActionIdPut'
     *
     * @param  string $action_id The action identifier (required)
     * @param  \Swagger\Client\Model\DescriptionStatusPriorityAssigneesDueAtCompletedAtModel $description_status_priority_assignees_due_at_completed_at_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function actionsActionIdPutRequest($action_id, $description_status_priority_assignees_due_at_completed_at_model = null)
    {
        // verify the required parameter 'action_id' is set
        if ($action_id === null || (is_array($action_id) && count($action_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $action_id when calling actionsActionIdPut'
            );
        }

        $resourcePath = '/actions/{actionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($action_id !== null) {
            $resourcePath = str_replace(
                '{' . 'actionId' . '}',
                ObjectSerializer::toPathValue($action_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($description_status_priority_assignees_due_at_completed_at_model)) {
            $_tempBody = $description_status_priority_assignees_due_at_completed_at_model;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation actionsPost
     *
     * Create an Action
     *
     * @param  \Swagger\Client\Model\AuditIdItemIdDescriptionStatusPriorityAssigneesDueAtModel $audit_id_item_id_description_status_priority_assignees_due_at_model audit_id_item_id_description_status_priority_assignees_due_at_model (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function actionsPost($audit_id_item_id_description_status_priority_assignees_due_at_model = null)
    {
        $this->actionsPostWithHttpInfo($audit_id_item_id_description_status_priority_assignees_due_at_model);
    }

    /**
     * Operation actionsPostWithHttpInfo
     *
     * Create an Action
     *
     * @param  \Swagger\Client\Model\AuditIdItemIdDescriptionStatusPriorityAssigneesDueAtModel $audit_id_item_id_description_status_priority_assignees_due_at_model (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function actionsPostWithHttpInfo($audit_id_item_id_description_status_priority_assignees_due_at_model = null)
    {
        $returnType = '';
        $request = $this->actionsPostRequest($audit_id_item_id_description_status_priority_assignees_due_at_model);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation actionsPostAsync
     *
     * Create an Action
     *
     * @param  \Swagger\Client\Model\AuditIdItemIdDescriptionStatusPriorityAssigneesDueAtModel $audit_id_item_id_description_status_priority_assignees_due_at_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function actionsPostAsync($audit_id_item_id_description_status_priority_assignees_due_at_model = null)
    {
        return $this->actionsPostAsyncWithHttpInfo($audit_id_item_id_description_status_priority_assignees_due_at_model)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation actionsPostAsyncWithHttpInfo
     *
     * Create an Action
     *
     * @param  \Swagger\Client\Model\AuditIdItemIdDescriptionStatusPriorityAssigneesDueAtModel $audit_id_item_id_description_status_priority_assignees_due_at_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function actionsPostAsyncWithHttpInfo($audit_id_item_id_description_status_priority_assignees_due_at_model = null)
    {
        $returnType = '';
        $request = $this->actionsPostRequest($audit_id_item_id_description_status_priority_assignees_due_at_model);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'actionsPost'
     *
     * @param  \Swagger\Client\Model\AuditIdItemIdDescriptionStatusPriorityAssigneesDueAtModel $audit_id_item_id_description_status_priority_assignees_due_at_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function actionsPostRequest($audit_id_item_id_description_status_priority_assignees_due_at_model = null)
    {

        $resourcePath = '/actions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($audit_id_item_id_description_status_priority_assignees_due_at_model)) {
            $_tempBody = $audit_id_item_id_description_status_priority_assignees_due_at_model;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation actionsSearchPost
     *
     * Search for actions given a range of criteria
     *
     * @param  \Swagger\Client\Model\AuditIdItemIdCreatedByStatusPriorityAssigneesDueAtCreatedAtModifiedAtMatchTextOffsetLimitModel $audit_id_item_id_created_by_status_priority_assignees_due_at_created_at_modified_at_match_text_offset_limit_model audit_id_item_id_created_by_status_priority_assignees_due_at_created_at_modified_at_match_text_offset_limit_model (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function actionsSearchPost($audit_id_item_id_created_by_status_priority_assignees_due_at_created_at_modified_at_match_text_offset_limit_model = null)
    {
        $this->actionsSearchPostWithHttpInfo($audit_id_item_id_created_by_status_priority_assignees_due_at_created_at_modified_at_match_text_offset_limit_model);
    }

    /**
     * Operation actionsSearchPostWithHttpInfo
     *
     * Search for actions given a range of criteria
     *
     * @param  \Swagger\Client\Model\AuditIdItemIdCreatedByStatusPriorityAssigneesDueAtCreatedAtModifiedAtMatchTextOffsetLimitModel $audit_id_item_id_created_by_status_priority_assignees_due_at_created_at_modified_at_match_text_offset_limit_model (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function actionsSearchPostWithHttpInfo($audit_id_item_id_created_by_status_priority_assignees_due_at_created_at_modified_at_match_text_offset_limit_model = null)
    {
        $returnType = '';
        $request = $this->actionsSearchPostRequest($audit_id_item_id_created_by_status_priority_assignees_due_at_created_at_modified_at_match_text_offset_limit_model);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation actionsSearchPostAsync
     *
     * Search for actions given a range of criteria
     *
     * @param  \Swagger\Client\Model\AuditIdItemIdCreatedByStatusPriorityAssigneesDueAtCreatedAtModifiedAtMatchTextOffsetLimitModel $audit_id_item_id_created_by_status_priority_assignees_due_at_created_at_modified_at_match_text_offset_limit_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function actionsSearchPostAsync($audit_id_item_id_created_by_status_priority_assignees_due_at_created_at_modified_at_match_text_offset_limit_model = null)
    {
        return $this->actionsSearchPostAsyncWithHttpInfo($audit_id_item_id_created_by_status_priority_assignees_due_at_created_at_modified_at_match_text_offset_limit_model)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation actionsSearchPostAsyncWithHttpInfo
     *
     * Search for actions given a range of criteria
     *
     * @param  \Swagger\Client\Model\AuditIdItemIdCreatedByStatusPriorityAssigneesDueAtCreatedAtModifiedAtMatchTextOffsetLimitModel $audit_id_item_id_created_by_status_priority_assignees_due_at_created_at_modified_at_match_text_offset_limit_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function actionsSearchPostAsyncWithHttpInfo($audit_id_item_id_created_by_status_priority_assignees_due_at_created_at_modified_at_match_text_offset_limit_model = null)
    {
        $returnType = '';
        $request = $this->actionsSearchPostRequest($audit_id_item_id_created_by_status_priority_assignees_due_at_created_at_modified_at_match_text_offset_limit_model);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'actionsSearchPost'
     *
     * @param  \Swagger\Client\Model\AuditIdItemIdCreatedByStatusPriorityAssigneesDueAtCreatedAtModifiedAtMatchTextOffsetLimitModel $audit_id_item_id_created_by_status_priority_assignees_due_at_created_at_modified_at_match_text_offset_limit_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function actionsSearchPostRequest($audit_id_item_id_created_by_status_priority_assignees_due_at_created_at_modified_at_match_text_offset_limit_model = null)
    {

        $resourcePath = '/actions/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($audit_id_item_id_created_by_status_priority_assignees_due_at_created_at_modified_at_match_text_offset_limit_model)) {
            $_tempBody = $audit_id_item_id_created_by_status_priority_assignees_due_at_created_at_modified_at_match_text_offset_limit_model;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
