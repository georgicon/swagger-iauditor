<?php
/**
 * AuditsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SafetyCulture API
 *
 * The SafetyCulture API gives you direct access to your data in the SafetyCulture platform.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * AuditsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuditsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation auditsAuditIdDeepLinkPost
     *
     * Generate a link to the audit
     *
     * @param  string $audit_id audit_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auditsAuditIdDeepLinkPost($audit_id)
    {
        $this->auditsAuditIdDeepLinkPostWithHttpInfo($audit_id);
    }

    /**
     * Operation auditsAuditIdDeepLinkPostWithHttpInfo
     *
     * Generate a link to the audit
     *
     * @param  string $audit_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings), HTTP response body content
     */
    public function auditsAuditIdDeepLinkPostWithHttpInfo($audit_id)
    {
        $returnType = '';
        $request = $this->auditsAuditIdDeepLinkPostRequest($audit_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders(), $response->getBody()->getContents()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auditsAuditIdDeepLinkPostAsync
     *
     * Generate a link to the audit
     *
     * @param  string $audit_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auditsAuditIdDeepLinkPostAsync($audit_id)
    {
        return $this->auditsAuditIdDeepLinkPostAsyncWithHttpInfo($audit_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auditsAuditIdDeepLinkPostAsyncWithHttpInfo
     *
     * Generate a link to the audit
     *
     * @param  string $audit_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auditsAuditIdDeepLinkPostAsyncWithHttpInfo($audit_id)
    {
        $returnType = '';
        $request = $this->auditsAuditIdDeepLinkPostRequest($audit_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auditsAuditIdDeepLinkPost'
     *
     * @param  string $audit_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auditsAuditIdDeepLinkPostRequest($audit_id)
    {
        // verify the required parameter 'audit_id' is set
        if ($audit_id === null || (is_array($audit_id) && count($audit_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $audit_id when calling auditsAuditIdDeepLinkPost'
            );
        }

        $resourcePath = '/audits/{auditId}/deep_link';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($audit_id !== null) {
            $resourcePath = str_replace(
                '{' . 'auditId' . '}',
                ObjectSerializer::toPathValue($audit_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auditsAuditIdExportPost
     *
     * Export an audit report
     *
     * @param  string $audit_id The audit ID that references the audit to be exported (required)
     * @param  string $format The format for the export (required)
     * @param  string $timezone The timezone for the export (optional)
     * @param  string $export_profile The id of the export profile to be applied (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auditsAuditIdExportPost($audit_id, $format, $timezone = null, $export_profile = null)
    {
        $this->auditsAuditIdExportPostWithHttpInfo($audit_id, $format, $timezone, $export_profile);
    }

    /**
     * Operation auditsAuditIdExportPostWithHttpInfo
     *
     * Export an audit report
     *
     * @param  string $audit_id The audit ID that references the audit to be exported (required)
     * @param  string $format The format for the export (required)
     * @param  string $timezone The timezone for the export (optional)
     * @param  string $export_profile The id of the export profile to be applied (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings), HTTP response body content
     */
    public function auditsAuditIdExportPostWithHttpInfo($audit_id, $format, $timezone = null, $export_profile = null)
    {
        $returnType = '';
        $request = $this->auditsAuditIdExportPostRequest($audit_id, $format, $timezone, $export_profile);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders(), $response->getBody()->getContents()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auditsAuditIdExportPostAsync
     *
     * Export an audit report
     *
     * @param  string $audit_id The audit ID that references the audit to be exported (required)
     * @param  string $format The format for the export (required)
     * @param  string $timezone The timezone for the export (optional)
     * @param  string $export_profile The id of the export profile to be applied (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auditsAuditIdExportPostAsync($audit_id, $format, $timezone = null, $export_profile = null)
    {
        return $this->auditsAuditIdExportPostAsyncWithHttpInfo($audit_id, $format, $timezone, $export_profile)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auditsAuditIdExportPostAsyncWithHttpInfo
     *
     * Export an audit report
     *
     * @param  string $audit_id The audit ID that references the audit to be exported (required)
     * @param  string $format The format for the export (required)
     * @param  string $timezone The timezone for the export (optional)
     * @param  string $export_profile The id of the export profile to be applied (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auditsAuditIdExportPostAsyncWithHttpInfo($audit_id, $format, $timezone = null, $export_profile = null)
    {
        $returnType = '';
        $request = $this->auditsAuditIdExportPostRequest($audit_id, $format, $timezone, $export_profile);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auditsAuditIdExportPost'
     *
     * @param  string $audit_id The audit ID that references the audit to be exported (required)
     * @param  string $format The format for the export (required)
     * @param  string $timezone The timezone for the export (optional)
     * @param  string $export_profile The id of the export profile to be applied (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auditsAuditIdExportPostRequest($audit_id, $format, $timezone = null, $export_profile = null)
    {
        // verify the required parameter 'audit_id' is set
        if ($audit_id === null || (is_array($audit_id) && count($audit_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $audit_id when calling auditsAuditIdExportPost'
            );
        }
        // verify the required parameter 'format' is set
        if ($format === null || (is_array($format) && count($format) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $format when calling auditsAuditIdExportPost'
            );
        }

        $resourcePath = '/audits/{auditId}/export';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }
        // query params
        if ($timezone !== null) {
            $queryParams['timezone'] = ObjectSerializer::toQueryValue($timezone);
        }
        // query params
        if ($export_profile !== null) {
            $queryParams['export_profile'] = ObjectSerializer::toQueryValue($export_profile);
        }

        // path params
        if ($audit_id !== null) {
            $resourcePath = str_replace(
                '{' . 'auditId' . '}',
                ObjectSerializer::toPathValue($audit_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auditsAuditIdExportsExportIdFilenameGet
     *
     * Download an audit report
     *
     * @param  string $audit_id The audit ID that references the audit to be exported (required)
     * @param  string $export_id The ID that references the export request (required)
     * @param  string $filename The filename generated by the export request (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auditsAuditIdExportsExportIdFilenameGet($audit_id, $export_id, $filename)
    {
        $this->auditsAuditIdExportsExportIdFilenameGetWithHttpInfo($audit_id, $export_id, $filename);
    }

    /**
     * Operation auditsAuditIdExportsExportIdFilenameGetWithHttpInfo
     *
     * Download an audit report
     *
     * @param  string $audit_id The audit ID that references the audit to be exported (required)
     * @param  string $export_id The ID that references the export request (required)
     * @param  string $filename The filename generated by the export request (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings), HTTP response body content
     */
    public function auditsAuditIdExportsExportIdFilenameGetWithHttpInfo($audit_id, $export_id, $filename)
    {
        $returnType = '';
        $request = $this->auditsAuditIdExportsExportIdFilenameGetRequest($audit_id, $export_id, $filename);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders(), $response->getBody()->getContents()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auditsAuditIdExportsExportIdFilenameGetAsync
     *
     * Download an audit report
     *
     * @param  string $audit_id The audit ID that references the audit to be exported (required)
     * @param  string $export_id The ID that references the export request (required)
     * @param  string $filename The filename generated by the export request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auditsAuditIdExportsExportIdFilenameGetAsync($audit_id, $export_id, $filename)
    {
        return $this->auditsAuditIdExportsExportIdFilenameGetAsyncWithHttpInfo($audit_id, $export_id, $filename)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auditsAuditIdExportsExportIdFilenameGetAsyncWithHttpInfo
     *
     * Download an audit report
     *
     * @param  string $audit_id The audit ID that references the audit to be exported (required)
     * @param  string $export_id The ID that references the export request (required)
     * @param  string $filename The filename generated by the export request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auditsAuditIdExportsExportIdFilenameGetAsyncWithHttpInfo($audit_id, $export_id, $filename)
    {
        $returnType = '';
        $request = $this->auditsAuditIdExportsExportIdFilenameGetRequest($audit_id, $export_id, $filename);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auditsAuditIdExportsExportIdFilenameGet'
     *
     * @param  string $audit_id The audit ID that references the audit to be exported (required)
     * @param  string $export_id The ID that references the export request (required)
     * @param  string $filename The filename generated by the export request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auditsAuditIdExportsExportIdFilenameGetRequest($audit_id, $export_id, $filename)
    {
        // verify the required parameter 'audit_id' is set
        if ($audit_id === null || (is_array($audit_id) && count($audit_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $audit_id when calling auditsAuditIdExportsExportIdFilenameGet'
            );
        }
        // verify the required parameter 'export_id' is set
        if ($export_id === null || (is_array($export_id) && count($export_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $export_id when calling auditsAuditIdExportsExportIdFilenameGet'
            );
        }
        // verify the required parameter 'filename' is set
        if ($filename === null || (is_array($filename) && count($filename) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filename when calling auditsAuditIdExportsExportIdFilenameGet'
            );
        }

        $resourcePath = '/audits/{auditId}/exports/{exportId}/{filename}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($audit_id !== null) {
            $resourcePath = str_replace(
                '{' . 'auditId' . '}',
                ObjectSerializer::toPathValue($audit_id),
                $resourcePath
            );
        }
        // path params
        if ($export_id !== null) {
            $resourcePath = str_replace(
                '{' . 'exportId' . '}',
                ObjectSerializer::toPathValue($export_id),
                $resourcePath
            );
        }
        // path params
        if ($filename !== null) {
            $resourcePath = str_replace(
                '{' . 'filename' . '}',
                ObjectSerializer::toPathValue($filename),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auditsAuditIdExportsExportIdGet
     *
     * Check the status of the export request submitted earlier
     *
     * @param  string $audit_id The audit ID that references the audit to be exported (required)
     * @param  string $export_id The ID that references the export request (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auditsAuditIdExportsExportIdGet($audit_id, $export_id)
    {
        $this->auditsAuditIdExportsExportIdGetWithHttpInfo($audit_id, $export_id);
    }

    /**
     * Operation auditsAuditIdExportsExportIdGetWithHttpInfo
     *
     * Check the status of the export request submitted earlier
     *
     * @param  string $audit_id The audit ID that references the audit to be exported (required)
     * @param  string $export_id The ID that references the export request (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings), HTTP response body content
     */
    public function auditsAuditIdExportsExportIdGetWithHttpInfo($audit_id, $export_id)
    {
        $returnType = '';
        $request = $this->auditsAuditIdExportsExportIdGetRequest($audit_id, $export_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders(), $response->getBody()->getContents()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auditsAuditIdExportsExportIdGetAsync
     *
     * Check the status of the export request submitted earlier
     *
     * @param  string $audit_id The audit ID that references the audit to be exported (required)
     * @param  string $export_id The ID that references the export request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auditsAuditIdExportsExportIdGetAsync($audit_id, $export_id)
    {
        return $this->auditsAuditIdExportsExportIdGetAsyncWithHttpInfo($audit_id, $export_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auditsAuditIdExportsExportIdGetAsyncWithHttpInfo
     *
     * Check the status of the export request submitted earlier
     *
     * @param  string $audit_id The audit ID that references the audit to be exported (required)
     * @param  string $export_id The ID that references the export request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auditsAuditIdExportsExportIdGetAsyncWithHttpInfo($audit_id, $export_id)
    {
        $returnType = '';
        $request = $this->auditsAuditIdExportsExportIdGetRequest($audit_id, $export_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auditsAuditIdExportsExportIdGet'
     *
     * @param  string $audit_id The audit ID that references the audit to be exported (required)
     * @param  string $export_id The ID that references the export request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auditsAuditIdExportsExportIdGetRequest($audit_id, $export_id)
    {
        // verify the required parameter 'audit_id' is set
        if ($audit_id === null || (is_array($audit_id) && count($audit_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $audit_id when calling auditsAuditIdExportsExportIdGet'
            );
        }
        // verify the required parameter 'export_id' is set
        if ($export_id === null || (is_array($export_id) && count($export_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $export_id when calling auditsAuditIdExportsExportIdGet'
            );
        }

        $resourcePath = '/audits/{auditId}/exports/{exportId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($audit_id !== null) {
            $resourcePath = str_replace(
                '{' . 'auditId' . '}',
                ObjectSerializer::toPathValue($audit_id),
                $resourcePath
            );
        }
        // path params
        if ($export_id !== null) {
            $resourcePath = str_replace(
                '{' . 'exportId' . '}',
                ObjectSerializer::toPathValue($export_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auditsAuditIdGet
     *
     * Get a particular audit
     *
     * @param  string $audit_id The audit identifier (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auditsAuditIdGet($audit_id)
    {
        $this->auditsAuditIdGetWithHttpInfo($audit_id);
    }

    /**
     * Operation auditsAuditIdGetWithHttpInfo
     *
     * Get a particular audit
     *
     * @param  string $audit_id The audit identifier (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings), HTTP response body content
     */
    public function auditsAuditIdGetWithHttpInfo($audit_id)
    {
        $returnType = '';
        $request = $this->auditsAuditIdGetRequest($audit_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders(), $response->getBody()->getContents()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auditsAuditIdGetAsync
     *
     * Get a particular audit
     *
     * @param  string $audit_id The audit identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auditsAuditIdGetAsync($audit_id)
    {
        return $this->auditsAuditIdGetAsyncWithHttpInfo($audit_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auditsAuditIdGetAsyncWithHttpInfo
     *
     * Get a particular audit
     *
     * @param  string $audit_id The audit identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auditsAuditIdGetAsyncWithHttpInfo($audit_id)
    {
        $returnType = '';
        $request = $this->auditsAuditIdGetRequest($audit_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auditsAuditIdGet'
     *
     * @param  string $audit_id The audit identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auditsAuditIdGetRequest($audit_id)
    {
        // verify the required parameter 'audit_id' is set
        if ($audit_id === null || (is_array($audit_id) && count($audit_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $audit_id when calling auditsAuditIdGet'
            );
        }

        $resourcePath = '/audits/{auditId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($audit_id !== null) {
            $resourcePath = str_replace(
                '{' . 'auditId' . '}',
                ObjectSerializer::toPathValue($audit_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auditsAuditIdMediaMediaIdGet
     *
     * Get a media item associated with an audit
     *
     * @param  string $audit_id The audit ID that references the media (required)
     * @param  string $media_id The media ID within the audit (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auditsAuditIdMediaMediaIdGet($audit_id, $media_id)
    {
        $this->auditsAuditIdMediaMediaIdGetWithHttpInfo($audit_id, $media_id);
    }

    /**
     * Operation auditsAuditIdMediaMediaIdGetWithHttpInfo
     *
     * Get a media item associated with an audit
     *
     * @param  string $audit_id The audit ID that references the media (required)
     * @param  string $media_id The media ID within the audit (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings), HTTP response body content
     */
    public function auditsAuditIdMediaMediaIdGetWithHttpInfo($audit_id, $media_id)
    {
        $returnType = '';
        $request = $this->auditsAuditIdMediaMediaIdGetRequest($audit_id, $media_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders(), $response->getBody()->getContents()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auditsAuditIdMediaMediaIdGetAsync
     *
     * Get a media item associated with an audit
     *
     * @param  string $audit_id The audit ID that references the media (required)
     * @param  string $media_id The media ID within the audit (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auditsAuditIdMediaMediaIdGetAsync($audit_id, $media_id)
    {
        return $this->auditsAuditIdMediaMediaIdGetAsyncWithHttpInfo($audit_id, $media_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auditsAuditIdMediaMediaIdGetAsyncWithHttpInfo
     *
     * Get a media item associated with an audit
     *
     * @param  string $audit_id The audit ID that references the media (required)
     * @param  string $media_id The media ID within the audit (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auditsAuditIdMediaMediaIdGetAsyncWithHttpInfo($audit_id, $media_id)
    {
        $returnType = '';
        $request = $this->auditsAuditIdMediaMediaIdGetRequest($audit_id, $media_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auditsAuditIdMediaMediaIdGet'
     *
     * @param  string $audit_id The audit ID that references the media (required)
     * @param  string $media_id The media ID within the audit (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auditsAuditIdMediaMediaIdGetRequest($audit_id, $media_id)
    {
        // verify the required parameter 'audit_id' is set
        if ($audit_id === null || (is_array($audit_id) && count($audit_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $audit_id when calling auditsAuditIdMediaMediaIdGet'
            );
        }
        // verify the required parameter 'media_id' is set
        if ($media_id === null || (is_array($media_id) && count($media_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $media_id when calling auditsAuditIdMediaMediaIdGet'
            );
        }

        $resourcePath = '/audits/{auditId}/media/{mediaId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($audit_id !== null) {
            $resourcePath = str_replace(
                '{' . 'auditId' . '}',
                ObjectSerializer::toPathValue($audit_id),
                $resourcePath
            );
        }
        // path params
        if ($media_id !== null) {
            $resourcePath = str_replace(
                '{' . 'mediaId' . '}',
                ObjectSerializer::toPathValue($media_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auditsAuditIdPut
     *
     * Updates a particular audit
     *
     * @param  string $audit_id The audit identifier (required)
     * @param  \Swagger\Client\Model\HeaderItemsItemsArchivedModel $header_items_items_archived_model header_items_items_archived_model (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auditsAuditIdPut($audit_id, $header_items_items_archived_model = null)
    {
        $this->auditsAuditIdPutWithHttpInfo($audit_id, $header_items_items_archived_model);
    }

    /**
     * Operation auditsAuditIdPutWithHttpInfo
     *
     * Updates a particular audit
     *
     * @param  string $audit_id The audit identifier (required)
     * @param  \Swagger\Client\Model\HeaderItemsItemsArchivedModel $header_items_items_archived_model (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings), HTTP response body content
     */
    public function auditsAuditIdPutWithHttpInfo($audit_id, $header_items_items_archived_model = null)
    {
        $returnType = '';
        $request = $this->auditsAuditIdPutRequest($audit_id, $header_items_items_archived_model);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders(), $response->getBody()->getContents()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auditsAuditIdPutAsync
     *
     * Updates a particular audit
     *
     * @param  string $audit_id The audit identifier (required)
     * @param  \Swagger\Client\Model\HeaderItemsItemsArchivedModel $header_items_items_archived_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auditsAuditIdPutAsync($audit_id, $header_items_items_archived_model = null)
    {
        return $this->auditsAuditIdPutAsyncWithHttpInfo($audit_id, $header_items_items_archived_model)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auditsAuditIdPutAsyncWithHttpInfo
     *
     * Updates a particular audit
     *
     * @param  string $audit_id The audit identifier (required)
     * @param  \Swagger\Client\Model\HeaderItemsItemsArchivedModel $header_items_items_archived_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auditsAuditIdPutAsyncWithHttpInfo($audit_id, $header_items_items_archived_model = null)
    {
        $returnType = '';
        $request = $this->auditsAuditIdPutRequest($audit_id, $header_items_items_archived_model);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auditsAuditIdPut'
     *
     * @param  string $audit_id The audit identifier (required)
     * @param  \Swagger\Client\Model\HeaderItemsItemsArchivedModel $header_items_items_archived_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auditsAuditIdPutRequest($audit_id, $header_items_items_archived_model = null)
    {
        // verify the required parameter 'audit_id' is set
        if ($audit_id === null || (is_array($audit_id) && count($audit_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $audit_id when calling auditsAuditIdPut'
            );
        }

        $resourcePath = '/audits/{auditId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($audit_id !== null) {
            $resourcePath = str_replace(
                '{' . 'auditId' . '}',
                ObjectSerializer::toPathValue($audit_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($header_items_items_archived_model)) {
            $_tempBody = $header_items_items_archived_model;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auditsAuditIdSharePost
     *
     * Share an audit
     *
     * @param  string $audit_id audit_id (required)
     * @param  \Swagger\Client\Model\SharesModel $shares_model shares_model (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auditsAuditIdSharePost($audit_id, $shares_model)
    {
        $this->auditsAuditIdSharePostWithHttpInfo($audit_id, $shares_model);
    }

    /**
     * Operation auditsAuditIdSharePostWithHttpInfo
     *
     * Share an audit
     *
     * @param  string $audit_id (required)
     * @param  \Swagger\Client\Model\SharesModel $shares_model (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings), HTTP response body content
     */
    public function auditsAuditIdSharePostWithHttpInfo($audit_id, $shares_model)
    {
        $returnType = '';
        $request = $this->auditsAuditIdSharePostRequest($audit_id, $shares_model);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders(), $response->getBody()->getContents()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auditsAuditIdSharePostAsync
     *
     * Share an audit
     *
     * @param  string $audit_id (required)
     * @param  \Swagger\Client\Model\SharesModel $shares_model (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auditsAuditIdSharePostAsync($audit_id, $shares_model)
    {
        return $this->auditsAuditIdSharePostAsyncWithHttpInfo($audit_id, $shares_model)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auditsAuditIdSharePostAsyncWithHttpInfo
     *
     * Share an audit
     *
     * @param  string $audit_id (required)
     * @param  \Swagger\Client\Model\SharesModel $shares_model (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auditsAuditIdSharePostAsyncWithHttpInfo($audit_id, $shares_model)
    {
        $returnType = '';
        $request = $this->auditsAuditIdSharePostRequest($audit_id, $shares_model);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auditsAuditIdSharePost'
     *
     * @param  string $audit_id (required)
     * @param  \Swagger\Client\Model\SharesModel $shares_model (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auditsAuditIdSharePostRequest($audit_id, $shares_model)
    {
        // verify the required parameter 'audit_id' is set
        if ($audit_id === null || (is_array($audit_id) && count($audit_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $audit_id when calling auditsAuditIdSharePost'
            );
        }
        // verify the required parameter 'shares_model' is set
        if ($shares_model === null || (is_array($shares_model) && count($shares_model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shares_model when calling auditsAuditIdSharePost'
            );
        }

        $resourcePath = '/audits/{auditId}/share';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($audit_id !== null) {
            $resourcePath = str_replace(
                '{' . 'auditId' . '}',
                ObjectSerializer::toPathValue($audit_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($shares_model)) {
            $_tempBody = $shares_model;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auditsAuditIdWebReportLinkDelete
     *
     * Delete the link to the web report of the audit
     *
     * @param  string $audit_id audit_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auditsAuditIdWebReportLinkDelete($audit_id)
    {
        $this->auditsAuditIdWebReportLinkDeleteWithHttpInfo($audit_id);
    }

    /**
     * Operation auditsAuditIdWebReportLinkDeleteWithHttpInfo
     *
     * Delete the link to the web report of the audit
     *
     * @param  string $audit_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings), HTTP response body content
     */
    public function auditsAuditIdWebReportLinkDeleteWithHttpInfo($audit_id)
    {
        $returnType = '';
        $request = $this->auditsAuditIdWebReportLinkDeleteRequest($audit_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders(), $response->getBody()->getContents()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auditsAuditIdWebReportLinkDeleteAsync
     *
     * Delete the link to the web report of the audit
     *
     * @param  string $audit_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auditsAuditIdWebReportLinkDeleteAsync($audit_id)
    {
        return $this->auditsAuditIdWebReportLinkDeleteAsyncWithHttpInfo($audit_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auditsAuditIdWebReportLinkDeleteAsyncWithHttpInfo
     *
     * Delete the link to the web report of the audit
     *
     * @param  string $audit_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auditsAuditIdWebReportLinkDeleteAsyncWithHttpInfo($audit_id)
    {
        $returnType = '';
        $request = $this->auditsAuditIdWebReportLinkDeleteRequest($audit_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auditsAuditIdWebReportLinkDelete'
     *
     * @param  string $audit_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auditsAuditIdWebReportLinkDeleteRequest($audit_id)
    {
        // verify the required parameter 'audit_id' is set
        if ($audit_id === null || (is_array($audit_id) && count($audit_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $audit_id when calling auditsAuditIdWebReportLinkDelete'
            );
        }

        $resourcePath = '/audits/{auditId}/web_report_link';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($audit_id !== null) {
            $resourcePath = str_replace(
                '{' . 'auditId' . '}',
                ObjectSerializer::toPathValue($audit_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auditsAuditIdWebReportLinkGet
     *
     * Retrieve a link to the web report of the audit
     *
     * @param  string $audit_id audit_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auditsAuditIdWebReportLinkGet($audit_id)
    {
        $this->auditsAuditIdWebReportLinkGetWithHttpInfo($audit_id);
    }

    /**
     * Operation auditsAuditIdWebReportLinkGetWithHttpInfo
     *
     * Retrieve a link to the web report of the audit
     *
     * @param  string $audit_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings), HTTP response body content
     */
    public function auditsAuditIdWebReportLinkGetWithHttpInfo($audit_id)
    {
        $returnType = '';
        $request = $this->auditsAuditIdWebReportLinkGetRequest($audit_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders(), $response->getBody()->getContents()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auditsAuditIdWebReportLinkGetAsync
     *
     * Retrieve a link to the web report of the audit
     *
     * @param  string $audit_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auditsAuditIdWebReportLinkGetAsync($audit_id)
    {
        return $this->auditsAuditIdWebReportLinkGetAsyncWithHttpInfo($audit_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auditsAuditIdWebReportLinkGetAsyncWithHttpInfo
     *
     * Retrieve a link to the web report of the audit
     *
     * @param  string $audit_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auditsAuditIdWebReportLinkGetAsyncWithHttpInfo($audit_id)
    {
        $returnType = '';
        $request = $this->auditsAuditIdWebReportLinkGetRequest($audit_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auditsAuditIdWebReportLinkGet'
     *
     * @param  string $audit_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auditsAuditIdWebReportLinkGetRequest($audit_id)
    {
        // verify the required parameter 'audit_id' is set
        if ($audit_id === null || (is_array($audit_id) && count($audit_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $audit_id when calling auditsAuditIdWebReportLinkGet'
            );
        }

        $resourcePath = '/audits/{auditId}/web_report_link';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($audit_id !== null) {
            $resourcePath = str_replace(
                '{' . 'auditId' . '}',
                ObjectSerializer::toPathValue($audit_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auditsPost
     *
     * Start an audit
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auditsPost()
    {
        $this->auditsPostWithHttpInfo();
    }

    /**
     * Operation auditsPostWithHttpInfo
     *
     * Start an audit
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings), HTTP response body content
     */
    public function auditsPostWithHttpInfo()
    {
        $returnType = '';
        $request = $this->auditsPostRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders(), $response->getBody()->getContents()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auditsPostAsync
     *
     * Start an audit
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auditsPostAsync()
    {
        return $this->auditsPostAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auditsPostAsyncWithHttpInfo
     *
     * Start an audit
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auditsPostAsyncWithHttpInfo()
    {
        $returnType = '';
        $request = $this->auditsPostRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auditsPost'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auditsPostRequest()
    {

        $resourcePath = '/audits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auditsSearchGet
     *
     * Search modified audits
     *
     * @param  string[] $field Field(s) to retrieve (optional)
     * @param  string $order The datetime order in which the audits will be given (optional, default to asc)
     * @param  \DateTime $modified_after Audits should be last modified after this date and time (optional)
     * @param  \DateTime $modified_before Audits should be last modified before this date and time (optional)
     * @param  string[] $template Audits should be made from this template (optional)
     * @param  string $archived Flag indicating should audits be archived, non archived, or both (optional, default to false)
     * @param  string $completed Flag indicating should audits be completed, non completed, or both (optional, default to both)
     * @param  string $owner Retrieve audits owned by me or shared with me by other users. Or all the audits I have access to. (optional, default to all)
     * @param  float $limit Maximum number of entries to return (optional, default to 1000)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auditsSearchGet($field = null, $order = 'asc', $modified_after = null, $modified_before = null, $template = null, $archived = 'false', $completed = 'both', $owner = 'all', $limit = '1000')
    {
        $this->auditsSearchGetWithHttpInfo($field, $order, $modified_after, $modified_before, $template, $archived, $completed, $owner, $limit);
    }

    /**
     * Operation auditsSearchGetWithHttpInfo
     *
     * Search modified audits
     *
     * @param  string[] $field Field(s) to retrieve (optional)
     * @param  string $order The datetime order in which the audits will be given (optional, default to asc)
     * @param  \DateTime $modified_after Audits should be last modified after this date and time (optional)
     * @param  \DateTime $modified_before Audits should be last modified before this date and time (optional)
     * @param  string[] $template Audits should be made from this template (optional)
     * @param  string $archived Flag indicating should audits be archived, non archived, or both (optional, default to false)
     * @param  string $completed Flag indicating should audits be completed, non completed, or both (optional, default to both)
     * @param  string $owner Retrieve audits owned by me or shared with me by other users. Or all the audits I have access to. (optional, default to all)
     * @param  float $limit Maximum number of entries to return (optional, default to 1000)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings), HTTP response body content
     */
    public function auditsSearchGetWithHttpInfo($field = null, $order = 'asc', $modified_after = null, $modified_before = null, $template = null, $archived = 'false', $completed = 'both', $owner = 'all', $limit = '1000')
    {
        $returnType = '';
        $request = $this->auditsSearchGetRequest($field, $order, $modified_after, $modified_before, $template, $archived, $completed, $owner, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders(), $response->getBody()->getContents()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auditsSearchGetAsync
     *
     * Search modified audits
     *
     * @param  string[] $field Field(s) to retrieve (optional)
     * @param  string $order The datetime order in which the audits will be given (optional, default to asc)
     * @param  \DateTime $modified_after Audits should be last modified after this date and time (optional)
     * @param  \DateTime $modified_before Audits should be last modified before this date and time (optional)
     * @param  string[] $template Audits should be made from this template (optional)
     * @param  string $archived Flag indicating should audits be archived, non archived, or both (optional, default to false)
     * @param  string $completed Flag indicating should audits be completed, non completed, or both (optional, default to both)
     * @param  string $owner Retrieve audits owned by me or shared with me by other users. Or all the audits I have access to. (optional, default to all)
     * @param  float $limit Maximum number of entries to return (optional, default to 1000)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auditsSearchGetAsync($field = null, $order = 'asc', $modified_after = null, $modified_before = null, $template = null, $archived = 'false', $completed = 'both', $owner = 'all', $limit = '1000')
    {
        return $this->auditsSearchGetAsyncWithHttpInfo($field, $order, $modified_after, $modified_before, $template, $archived, $completed, $owner, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auditsSearchGetAsyncWithHttpInfo
     *
     * Search modified audits
     *
     * @param  string[] $field Field(s) to retrieve (optional)
     * @param  string $order The datetime order in which the audits will be given (optional, default to asc)
     * @param  \DateTime $modified_after Audits should be last modified after this date and time (optional)
     * @param  \DateTime $modified_before Audits should be last modified before this date and time (optional)
     * @param  string[] $template Audits should be made from this template (optional)
     * @param  string $archived Flag indicating should audits be archived, non archived, or both (optional, default to false)
     * @param  string $completed Flag indicating should audits be completed, non completed, or both (optional, default to both)
     * @param  string $owner Retrieve audits owned by me or shared with me by other users. Or all the audits I have access to. (optional, default to all)
     * @param  float $limit Maximum number of entries to return (optional, default to 1000)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auditsSearchGetAsyncWithHttpInfo($field = null, $order = 'asc', $modified_after = null, $modified_before = null, $template = null, $archived = 'false', $completed = 'both', $owner = 'all', $limit = '1000')
    {
        $returnType = '';
        $request = $this->auditsSearchGetRequest($field, $order, $modified_after, $modified_before, $template, $archived, $completed, $owner, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auditsSearchGet'
     *
     * @param  string[] $field Field(s) to retrieve (optional)
     * @param  string $order The datetime order in which the audits will be given (optional, default to asc)
     * @param  \DateTime $modified_after Audits should be last modified after this date and time (optional)
     * @param  \DateTime $modified_before Audits should be last modified before this date and time (optional)
     * @param  string[] $template Audits should be made from this template (optional)
     * @param  string $archived Flag indicating should audits be archived, non archived, or both (optional, default to false)
     * @param  string $completed Flag indicating should audits be completed, non completed, or both (optional, default to both)
     * @param  string $owner Retrieve audits owned by me or shared with me by other users. Or all the audits I have access to. (optional, default to all)
     * @param  float $limit Maximum number of entries to return (optional, default to 1000)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auditsSearchGetRequest($field = null, $order = 'asc', $modified_after = null, $modified_before = null, $template = null, $archived = 'false', $completed = 'both', $owner = 'all', $limit = '1000')
    {
        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AuditsApi.auditsSearchGet, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AuditsApi.auditsSearchGet, must be bigger than or equal to 1.');
        }


        $resourcePath = '/audits/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($field)) {
            $field = ObjectSerializer::serializeCollection($field, 'csv', true);
        }
        if ($field !== null) {
            $queryParams['field'] = ObjectSerializer::toQueryValue($field);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        // query params
        if ($modified_after !== null) {
            $queryParams['modified_after'] = ObjectSerializer::toQueryValue($modified_after);
        }
        // query params
        if ($modified_before !== null) {
            $queryParams['modified_before'] = ObjectSerializer::toQueryValue($modified_before);
        }
        // query params
        if (is_array($template)) {
            $template = ObjectSerializer::serializeCollection($template, 'csv', true);
        }
        if ($template !== null) {
            $queryParams['template'] = ObjectSerializer::toQueryValue($template);
        }
        // query params
        if ($archived !== null) {
            $queryParams['archived'] = ObjectSerializer::toQueryValue($archived);
        }
        // query params
        if ($completed !== null) {
            $queryParams['completed'] = ObjectSerializer::toQueryValue($completed);
        }
        // query params
        if ($owner !== null) {
            $queryParams['owner'] = ObjectSerializer::toQueryValue($owner);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
